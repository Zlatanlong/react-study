{"ast":null,"code":"var _jsxFileName = \"/Users/zlatan/Documents/js-study/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // import App from './App'\n\nimport { createStore } from 'redux';\nimport { Povider, connect } from 'react-redux'; // 用于产生动作 必须对对象赋予新的值\n\nconst reducer = function (state = {\n  num: 0\n}, action) {\n  switch (action.type) {\n    case 'add':\n      state.num++;\n      break;\n\n    default:\n  }\n\n  return { ...state\n  };\n};\n\nconst store = createStore(reducer); // 将state映射到props函数\n\nfunction mapStateToProps(state) {\n  return {\n    value: state.num\n  };\n} // 将修改state数据的方法映射到props, 默认会传入store里的dispatch方法\n\n\nfunction mapDispatchToProps(dispath) {\n  return {\n    onAddClick: () => {\n      dispath(addAction);\n    }\n  };\n} // 将上面的2个方法，讲数据仓库的state和修改state的方法映射到组件上。形成新的组件\n\n\nconst addAction = {\n  type: 'add'\n};\n\nclass Counter extends React.Component {\n  render() {\n    // 计数通过store的state传给props，直接通过props就可以将state的数据获取\n    const value = this.props.value; // 将修改数据的时间或者方法传入props\n\n    const onAddClick = this.props.onAddClick;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"\\u8BA1\\u6570\\u7684\\u6570\\u91CF\\u662F\\uFF1A\", value), React.createElement(\"button\", {\n      onClick: onAddClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"\\u6570\\u5B57+1\"));\n  }\n\n}\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(Counter);\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n})), document.getElementById('root'));","map":{"version":3,"sources":["/Users/zlatan/Documents/js-study/my-app/src/index.js"],"names":["React","ReactDOM","createStore","Povider","connect","reducer","state","num","action","type","store","mapStateToProps","value","mapDispatchToProps","dispath","onAddClick","addAction","Counter","Component","render","props","App","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,aAAjC,C,CAGA;;AACA,MAAMC,OAAO,GAAG,UAAUC,KAAK,GAAG;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAAlB,EAA8BC,MAA9B,EAAsC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACEH,MAAAA,KAAK,CAACC,GAAN;AACA;;AACF;AAJF;;AAMA,SAAO,EAAE,GAAGD;AAAL,GAAP;AACD,CARD;;AAUA,MAAMI,KAAK,GAAGR,WAAW,CAACG,OAAD,CAAzB,C,CAEA;;AACA,SAASM,eAAT,CAAyBL,KAAzB,EAAgC;AAC9B,SAAO;AACLM,IAAAA,KAAK,EAAEN,KAAK,CAACC;AADR,GAAP;AAGD,C,CACD;;;AACA,SAASM,kBAAT,CAA4BC,OAA5B,EAAqC;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAE,MAAM;AAAED,MAAAA,OAAO,CAACE,SAAD,CAAP;AAAoB;AADnC,GAAP;AAGD,C,CACD;;;AAEA,MAAMA,SAAS,GAAG;AAChBP,EAAAA,IAAI,EAAE;AADU,CAAlB;;AAMA,MAAMQ,OAAN,SAAsBjB,KAAK,CAACkB,SAA5B,CAAsC;AACpCC,EAAAA,MAAM,GAAG;AACP;AACA,UAAMP,KAAK,GAAG,KAAKQ,KAAL,CAAWR,KAAzB,CAFO,CAGP;;AACA,UAAMG,UAAU,GAAG,KAAKK,KAAL,CAAWL,UAA9B;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAAYH,KAAZ,CADF,EAEE;AAAQ,MAAA,OAAO,EAAEG,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,CADF;AAMD;;AAZmC;;AAetC,MAAMM,GAAG,GAAGjB,OAAO,CACjBO,eADiB,EAEjBE,kBAFiB,CAAP,CAGVI,OAHU,CAAZ;AAKAhB,QAAQ,CAACkB,MAAT,CAAgB,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAET,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAwB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAxB,CAAhB,EAAgEY,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhE","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './App'\nimport { createStore } from 'redux'\nimport { Povider, connect } from 'react-redux';\n\n\n// 用于产生动作 必须对对象赋予新的值\nconst reducer = function (state = { num: 0 }, action) {\n  switch (action.type) {\n    case 'add':\n      state.num++;\n      break;\n    default:\n  }\n  return { ...state }\n};\n\nconst store = createStore(reducer);\n\n// 将state映射到props函数\nfunction mapStateToProps(state) {\n  return {\n    value: state.num\n  }\n}\n// 将修改state数据的方法映射到props, 默认会传入store里的dispatch方法\nfunction mapDispatchToProps(dispath) {\n  return {\n    onAddClick: () => { dispath(addAction) }\n  }\n}\n// 将上面的2个方法，讲数据仓库的state和修改state的方法映射到组件上。形成新的组件\n\nconst addAction = {\n  type: 'add'\n}\n\n\n\nclass Counter extends React.Component {\n  render() {\n    // 计数通过store的state传给props，直接通过props就可以将state的数据获取\n    const value = this.props.value;\n    // 将修改数据的时间或者方法传入props\n    const onAddClick = this.props.onAddClick;\n    return (\n      <div>\n        <h1>计数的数量是：{value}</h1>\n        <button onClick={onAddClick}>数字+1</button>\n      </div>\n    )\n  }\n}\n\nconst App = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Counter)\n\nReactDOM.render(<Provider store={store}><App></App></Provider>, document.getElementById('root'));\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}